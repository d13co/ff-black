{
  "version": 3,
  "sources": [
    "/home/bit/code/ff-black/projects/ff-black/smart_contracts/ff_black/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BE;;AAAiD;;AAAjD;AACA;AAA0D;;AAA1D;AAEA;AAAwD;AAAxD;AACA;AAAgD;AAAhD;AACA;;AAAyD;AAAzD;AACA;AAAiD;AAAjD;AAEA;;AAAmD;AAAnD;AATF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAqIE;;AAAA;AAAA;AAAA;;AAAA;AArIF;;;AAqIE;;;AAAA;;AAZC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAXD;;AAAA;AAAA;AAAA;;AAAA;AA9GF;;;AAAA;AAAA;;AA8GE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAtGF;;;AAsGE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA9FF;;;AA8FE;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAhFF;;;AAAA;AAAA;;AAgFE;;;AAAA;;AAnEA;;AAAA;AAAA;AAAA;;AAAA;AAbF;;AAAA;AAAA;AAaE;;;AAAA;;AAbF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAaE;;;;;;;AACoB;;AAVpB;AAAA;AAAA;AAAA;AAgDa;;AAsGT;;;AAtGyB;;;;;;;;;;AAuG3B;AACA;AAvGY;;AAAA;;AAAA;AAAA;;AACW;AAAA;AAArB;;;AAEa;;AAAA;;AAtDjB;AAAA;AAAA;AAAA;AAsDa;AAkGT;;;AAlGqD;;AAmGvD;AACA;AAlGe;;AAAA;;AAAA;AAAA;;AArDjB;AAAA;AAAA;AAAA;AAqDa;AAgGT;;;AAhG6C;;AAiG/C;AACA;AAvJF;AAAA;AAAA;AAAA;AAuDa;;AAAA;AAAA;AA8FT;;;AA9FkD;;AA+FpD;AACA;AAvJF;AAAA;AAAA;AAAA;AAyDa;;AAAA;AAAA;;;AA1CW;;AAAA;AAAA;;AAsIpB;;;AAtI4B;;;;;;;;;;;AAuI9B;AACA;AAvIiC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAC1B;;AAAA;AAoIL;;;AApIuB;;;;;;;;;;;AAqIzB;AACA;AArIuB;;AAAA;;AAAA;AAAA;;AAAA;AAAvB;AAAA;;AAAA;AAAA;;AAAA;AAGA;;;;;;;;;;;;AAAA;;;AAAA;;;AAAA;AASK;;AAAA;AAAD;;;AACF;AAIY;;;;;;;;;;;AAJZ;;;;AAAA;;;AAAA;;AA2BqB;;AAAA;AAAA;AAArB;;;AAEa;;AAAA;;AA/DjB;AAAA;AAAA;AAAA;AA+Da;AAyFT;;;AAzF0D;;AA0F5D;AACA;AAzFe;;AAAA;;AA7DjB;AAAA;;AAAA;AAAA;AA6Da;AAuFT;;;AAvFqD;;;;;;;;;;;AAwFvD;AACA;AAvFe;;AAAA;;AAAA;AAAA;;AA9DjB;AAAA;AAAA;AAAA;AA8Da;AAqFT;;;AArFmD;;AAsFrD;AACA;AArJF;AAAA;AAAA;AAAA;AAgEa;;AAAA;AAAA;AAmFT;;;AAnFwD;;AAoF1D;AACA;AArJF;AAAA;AAAA;AAAA;AAkEa;;AAAA;AAAA;;;AAxDC;;;AA0DJ;;;;;;;;;;;;;AAAJ;AACA;AAIN;;;AAvEA;AAAA;;AAAA;AAAA;;AAAA;AALA;AAAA;AAAA;AAAA;AAiFE;AAIY;;;;;;;;;AAJZ;;;;AAAA;;;AAAA;;AASF;;;AACE;;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACkC;;AAAhC;AAAA;;;;;;;;;AAIJ;;;AACE;;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC0B;;;;;;;;;;AAI5B;;;AACE;;;AAEA;AAG0B;;;;;;;;AAH1B;;;AAAA;;;AAAA;;AA/GF;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAkJO;AAjJP;AAAA;AAAA;AAAA;AAiJO;AAhJP;AAAA;;AAAA;AAAA;AAgJO;AA/IP;AAAA;AAAA;AAAA;AA+IO;AA7IP;AAAA;;AAAA;AAAA;AA6IO;AA3BE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAUF;;;AACE;;;AAEmC;;AAAA;;;AAtIrC;AAsIE;AAAA;AACoD;;AAAb;AAAa;AArItD;AAqIE;AAAA;AACwC;;AAAV;;AAAU;AArI1C;AAqIE;AAAA;AACsD;;AAAd;;AAAc;AArIxD;;AAqIE;AAAA;AAC0C;;AAAX;;AAAW;AArI5C;AAqIE;AAAA;AAC8C;;AAAb;;AAAa;AApIhD;;AAoIE;AAAA;;AAIW;;AAhJb;AAAA;;AAAA;AAAA;AAgJS;AASL;;;AATsC;;;;;;;;;;;;AAUxC;AACA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 4"
    },
    "7": {
      "op": "bytecblock \"algoPrice\" \"assetPrice\" \"revenueAddress\" \"sellingAsset\" \"purchaseAsset\" \"unfreezeTime\" \"admin\" \"ERR:PAYRCV\" \"ERR:UNDERPAY\" \"ERR:OVERPAY\""
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "129": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "132": {
      "op": "bytec 6 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "134": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ]
    },
    "136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "137": {
      "op": "bytec_2 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\""
      ],
      "stack_out": [
        "\"revenueAddress\""
      ]
    },
    "138": {
      "op": "txn Sender",
      "defined_out": [
        "\"revenueAddress\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"revenueAddress\"",
        "new_state_value%1#0"
      ]
    },
    "140": {
      "op": "app_global_put",
      "stack_out": []
    },
    "141": {
      "op": "bytec_3 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\""
      ],
      "stack_out": [
        "\"sellingAsset\""
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"sellingAsset\"",
        "0"
      ],
      "stack_out": [
        "\"sellingAsset\"",
        "0"
      ]
    },
    "143": {
      "op": "app_global_put",
      "stack_out": []
    },
    "144": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\""
      ],
      "stack_out": [
        "\"algoPrice\""
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"algoPrice\"",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "bytec 4 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\""
      ],
      "stack_out": [
        "\"purchaseAsset\""
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"purchaseAsset\"",
        "0"
      ]
    },
    "150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "151": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\""
      ],
      "stack_out": [
        "\"assetPrice\""
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"assetPrice\"",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec 5 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\""
      ],
      "stack_out": [
        "\"unfreezeTime\""
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"unfreezeTime\"",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "160": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "163": {
      "op": "pushbytess 0xc4661a8e 0x79728b42 0xa0ef0f77 0x59e88229 0x7f19f9d4 0x0e665b9b 0xc8c8bb1f // method \"buy(txn)void\", method \"unfreeze(account)void\", method \"addWhitelist(address[])void\", method \"removeWhitelist(address[])void\", method \"optin(asset)void\", method \"getConfig()(address,uint64,uint64,uint64,uint64,uint64)\", method \"setConfig((address,uint64,uint64,uint64,uint64,uint64))void\"",
      "defined_out": [
        "Method(addWhitelist(address[])void)",
        "Method(buy(txn)void)",
        "Method(getConfig()(address,uint64,uint64,uint64,uint64,uint64))",
        "Method(optin(asset)void)",
        "Method(removeWhitelist(address[])void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(unfreeze(account)void)"
      ],
      "stack_out": [
        "Method(buy(txn)void)",
        "Method(unfreeze(account)void)",
        "Method(addWhitelist(address[])void)",
        "Method(removeWhitelist(address[])void)",
        "Method(optin(asset)void)",
        "Method(getConfig()(address,uint64,uint64,uint64,uint64,uint64))",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)"
      ]
    },
    "200": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addWhitelist(address[])void)",
        "Method(buy(txn)void)",
        "Method(getConfig()(address,uint64,uint64,uint64,uint64,uint64))",
        "Method(optin(asset)void)",
        "Method(removeWhitelist(address[])void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(unfreeze(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(buy(txn)void)",
        "Method(unfreeze(account)void)",
        "Method(addWhitelist(address[])void)",
        "Method(removeWhitelist(address[])void)",
        "Method(optin(asset)void)",
        "Method(getConfig()(address,uint64,uint64,uint64,uint64,uint64))",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "tmp%2#0"
      ]
    },
    "203": {
      "op": "match main_buy_route@5 main_unfreeze_route@6 main_addWhitelist_route@7 main_removeWhitelist_route@8 main_optin_route@9 main_getConfig_route@10 main_setConfig_route@11",
      "stack_out": []
    },
    "219": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "return",
      "stack_out": []
    },
    "221": {
      "block": "main_setConfig_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0"
      ]
    },
    "231": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.setConfig",
      "op": "callsub setConfig",
      "stack_out": []
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_getConfig_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.getConfig",
      "op": "callsub getConfig",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "246": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "0x151f7c75"
      ]
    },
    "252": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%32#0"
      ]
    },
    "253": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "254": {
      "op": "log",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "block": "main_optin_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "259": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "260": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "261": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "263": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "264": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "267": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "268": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "270": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.optin",
      "op": "callsub optin",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "block": "main_removeWhitelist_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "282": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32][]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32][]%1#0"
      ]
    },
    "285": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.removeWhitelist",
      "op": "callsub removeWhitelist",
      "stack_out": []
    },
    "288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "289": {
      "op": "return",
      "stack_out": []
    },
    "290": {
      "block": "main_addWhitelist_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "292": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "293": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "294": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "296": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "297": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32][]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32][]%0#0"
      ]
    },
    "300": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.addWhitelist",
      "op": "callsub addWhitelist",
      "stack_out": []
    },
    "303": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "304": {
      "op": "return",
      "stack_out": []
    },
    "305": {
      "block": "main_unfreeze_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "307": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "308": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "309": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "311": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "312": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "315": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "316": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "318": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.unfreeze",
      "op": "callsub unfreeze",
      "stack_out": []
    },
    "321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "322": {
      "op": "return",
      "stack_out": []
    },
    "323": {
      "block": "main_buy_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "325": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "326": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "327": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "329": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "330": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "332": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "333": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "334": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "337": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "return",
      "stack_out": []
    },
    "339": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "341": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "344": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "346": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "347": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "348": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "349": {
      "op": "return",
      "stack_out": []
    },
    "350": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.buy",
      "params": {
        "txn#0": "uint64"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "353": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "355": {
      "op": "dupn 4",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0"
      ]
    },
    "357": {
      "op": "txn Sender"
    },
    "359": {
      "op": "intc_0 // 0"
    },
    "360": {
      "op": "bytec_3 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "0",
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "0",
        "\"sellingAsset\""
      ]
    },
    "361": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%0#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%0#0"
      ]
    },
    "362": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "363": {
      "op": "txn GroupIndex",
      "defined_out": [
        "buyer#0",
        "sellingAsset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%0#1"
      ]
    },
    "365": {
      "op": "bnz buy_after_if_else@52",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "368": {
      "op": "pushbytes \"ERR:GTXN\"",
      "defined_out": [
        "\"ERR:GTXN\"",
        "buyer#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:GTXN\""
      ]
    },
    "378": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "379": {
      "op": "err"
    },
    "380": {
      "block": "buy_after_if_else@52",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "382": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "384": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "385": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "387": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "388": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%2#1"
      ]
    },
    "389": {
      "op": "bz buy_after_if_else@8",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "392": {
      "op": "frame_dig -1",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "394": {
      "op": "gtxns Receiver",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1"
      ]
    },
    "396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "0"
      ]
    },
    "397": {
      "op": "bytec_2 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "0",
        "awst_tmp%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "0",
        "\"revenueAddress\""
      ]
    },
    "398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "maybe_value%0#1"
      ]
    },
    "400": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "401": {
      "op": "bnz buy_after_if_else@40",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "404": {
      "op": "bytec 7 // \"ERR:PAYRCV\"",
      "defined_out": [
        "\"ERR:PAYRCV\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYRCV\""
      ]
    },
    "406": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "407": {
      "op": "err"
    },
    "408": {
      "block": "buy_after_if_else@40",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "410": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0"
      ]
    },
    "412": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "413": {
      "op": "frame_bury 4",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0"
      ]
    },
    "415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "0"
      ]
    },
    "416": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "417": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#1",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "418": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "419": {
      "op": ">=",
      "defined_out": [
        "cond#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "420": {
      "op": "bnz buy_after_if_else@44",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "423": {
      "op": "bytec 8 // \"ERR:UNDERPAY\"",
      "defined_out": [
        "\"ERR:UNDERPAY\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:UNDERPAY\""
      ]
    },
    "425": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "426": {
      "op": "err"
    },
    "427": {
      "block": "buy_after_if_else@44",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "428": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "429": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "430": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1"
      ]
    },
    "431": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%2#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1",
        "tmp%5#0"
      ]
    },
    "433": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "maybe_value%2#1"
      ]
    },
    "434": {
      "op": "%",
      "defined_out": [
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%8#0"
      ]
    },
    "435": {
      "op": "bz buy_after_if_else@48",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "438": {
      "op": "bytec 9 // \"ERR:OVERPAY\"",
      "defined_out": [
        "\"ERR:OVERPAY\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:OVERPAY\""
      ]
    },
    "440": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "441": {
      "op": "err"
    },
    "442": {
      "block": "buy_after_if_else@48",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "443": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "444": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "445": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0"
      ]
    },
    "446": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "449": {
      "op": "/",
      "defined_out": [
        "qty#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0"
      ]
    },
    "450": {
      "op": "frame_bury 1",
      "defined_out": [
        "qty#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "452": {
      "block": "buy_after_inlined_smart_contracts/ff_black/contract.algo.ts::FfBlack.validatePayment@13",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "454": {
      "op": "box_len",
      "defined_out": [
        "buyer#0",
        "cond#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%1#0",
        "cond#0"
      ]
    },
    "455": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "457": {
      "op": "bnz buy_after_if_else@16",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "460": {
      "op": "pushbytes \"ERR:NO_WL\"",
      "defined_out": [
        "\"ERR:NO_WL\"",
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:NO_WL\""
      ]
    },
    "471": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "472": {
      "op": "err"
    },
    "473": {
      "block": "buy_after_if_else@16",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "475": {
      "op": "box_get",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "476": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "477": {
      "op": "btoi",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "remaining#0"
      ]
    },
    "478": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "remaining#0",
        "remaining#0"
      ]
    },
    "479": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "remaining#0"
      ]
    },
    "481": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0",
        "maybe_exists%2#0"
      ]
    },
    "482": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0"
      ]
    },
    "483": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0",
        "qty#0"
      ]
    },
    "485": {
      "op": ">=",
      "defined_out": [
        "buyer#0",
        "cond#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "486": {
      "op": "bnz buy_after_if_else@20",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "489": {
      "op": "pushbytes \"ERR:QUOTA\"",
      "defined_out": [
        "\"ERR:QUOTA\"",
        "buyer#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:QUOTA\""
      ]
    },
    "500": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "501": {
      "op": "err"
    },
    "502": {
      "block": "buy_after_if_else@20",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0"
      ]
    },
    "504": {
      "op": "frame_dig 1",
      "defined_out": [
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0",
        "qty#0"
      ]
    },
    "506": {
      "op": "dup",
      "defined_out": [
        "qty#0",
        "qty#0 (copy)",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0",
        "qty#0 (copy)",
        "qty#0 (copy)"
      ]
    },
    "507": {
      "op": "cover 2",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "remaining#0",
        "qty#0 (copy)"
      ]
    },
    "509": {
      "op": "-",
      "defined_out": [
        "new_box_value%0#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "new_box_value%0#0"
      ]
    },
    "510": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "new_box_value%1#0"
      ]
    },
    "511": {
      "op": "frame_dig 5",
      "defined_out": [
        "buyer#0",
        "new_box_value%1#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "new_box_value%1#0",
        "buyer#0"
      ]
    },
    "513": {
      "op": "dup"
    },
    "514": {
      "op": "uncover 2",
      "defined_out": [
        "buyer#0",
        "buyer#0 (copy)",
        "new_box_value%1#0",
        "qty#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "buyer#0",
        "buyer#0 (copy)",
        "new_box_value%1#0"
      ]
    },
    "516": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0",
        "buyer#0"
      ]
    },
    "517": {
      "op": "itxn_begin"
    },
    "518": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "qty#0"
      ]
    },
    "519": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "521": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "buyer#0 (copy)"
      ]
    },
    "522": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "524": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "526": {
      "op": "dup",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0",
        "sellingAsset#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0",
        "sellingAsset#0 (copy)"
      ]
    },
    "527": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "529": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0",
        "4"
      ]
    },
    "530": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "532": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "533": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "535": {
      "op": "itxn_submit"
    },
    "536": {
      "op": "asset_holding_get AssetFrozen",
      "defined_out": [
        "buyer#0",
        "check%0#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0",
        "value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "538": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "value%0#0"
      ]
    },
    "539": {
      "op": "bnz buy_after_if_else@4",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "542": {
      "op": "itxn_begin"
    },
    "543": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "1"
      ]
    },
    "544": {
      "op": "itxn_field FreezeAssetFrozen",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "546": {
      "op": "frame_dig 5",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "548": {
      "op": "itxn_field FreezeAssetAccount",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "550": {
      "op": "frame_dig 6",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "sellingAsset#0"
      ]
    },
    "552": {
      "op": "itxn_field FreezeAsset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "554": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "buyer#0",
        "qty#0",
        "remaining#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "5"
      ]
    },
    "556": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "558": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "559": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "561": {
      "op": "itxn_submit"
    },
    "562": {
      "block": "buy_after_if_else@4",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "563": {
      "block": "buy_after_if_else@8",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "565": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "4"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%12#0"
      ]
    },
    "567": {
      "op": "bz buy_after_if_else@11",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "570": {
      "op": "frame_dig -1",
      "defined_out": [
        "awst_tmp%0#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "572": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0"
      ]
    },
    "574": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "0"
      ]
    },
    "575": {
      "op": "bytec_2 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "0",
        "\"revenueAddress\""
      ]
    },
    "576": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "577": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "maybe_value%4#0"
      ]
    },
    "578": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "579": {
      "op": "bnz buy_after_if_else@24",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "582": {
      "op": "bytec 7 // \"ERR:PAYRCV\"",
      "defined_out": [
        "\"ERR:PAYRCV\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYRCV\""
      ]
    },
    "584": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "585": {
      "op": "err"
    },
    "586": {
      "block": "buy_after_if_else@24",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "588": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0"
      ]
    },
    "590": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "0"
      ]
    },
    "591": {
      "op": "bytec 4 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "0",
        "\"purchaseAsset\""
      ]
    },
    "593": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "594": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "maybe_value%5#0"
      ]
    },
    "595": {
      "op": "==",
      "defined_out": [
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "596": {
      "op": "bnz buy_after_if_else@28",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "599": {
      "op": "pushbytes \"ERR:ASSET\"",
      "defined_out": [
        "\"ERR:ASSET\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:ASSET\""
      ]
    },
    "610": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "611": {
      "op": "err"
    },
    "612": {
      "block": "buy_after_if_else@28",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "614": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0"
      ]
    },
    "616": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "tmp%17#0"
      ]
    },
    "617": {
      "op": "frame_bury 3",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0"
      ]
    },
    "619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "0"
      ]
    },
    "620": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "622": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%6#0"
      ]
    },
    "623": {
      "op": ">=",
      "defined_out": [
        "cond#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "624": {
      "op": "bnz buy_after_if_else@32",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "627": {
      "op": "bytec 8 // \"ERR:UNDERPAY\"",
      "defined_out": [
        "\"ERR:UNDERPAY\"",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:UNDERPAY\""
      ]
    },
    "629": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "630": {
      "op": "err"
    },
    "631": {
      "block": "buy_after_if_else@32",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "632": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "633": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "634": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0"
      ]
    },
    "635": {
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%7#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0",
        "tmp%17#0"
      ]
    },
    "637": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%7#0"
      ]
    },
    "638": {
      "op": "%",
      "defined_out": [
        "tmp%17#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%20#0"
      ]
    },
    "639": {
      "op": "bz buy_after_if_else@36",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "642": {
      "op": "bytec 9 // \"ERR:OVERPAY\"",
      "defined_out": [
        "\"ERR:OVERPAY\"",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:OVERPAY\""
      ]
    },
    "644": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "645": {
      "op": "err"
    },
    "646": {
      "block": "buy_after_if_else@36",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "647": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "649": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0"
      ]
    },
    "650": {
      "op": "frame_dig 3",
      "defined_out": [
        "maybe_value%8#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0",
        "tmp%17#0"
      ]
    },
    "652": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%8#0"
      ]
    },
    "653": {
      "op": "/",
      "defined_out": [
        "qty#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "qty#0"
      ]
    },
    "654": {
      "op": "frame_bury 1",
      "defined_out": [
        "qty#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "656": {
      "op": "b buy_after_inlined_smart_contracts/ff_black/contract.algo.ts::FfBlack.validatePayment@13"
    },
    "659": {
      "block": "buy_after_if_else@11",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "pushbytes \"ERR:PAYTYPE\"",
      "defined_out": [
        "\"ERR:PAYTYPE\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYTYPE\""
      ]
    },
    "672": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "673": {
      "op": "err"
    },
    "674": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.unfreeze",
      "params": {
        "account#0": "bytes"
      },
      "block": "unfreeze",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "678": {
      "op": "bytec 5 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"unfreezeTime\""
      ]
    },
    "680": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "681": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "683": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": []
    },
    "684": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "685": {
      "op": "bytec_3 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"sellingAsset\""
      ]
    },
    "686": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "sellingAsset#0",
        "maybe_exists%1#0"
      ]
    },
    "687": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "sellingAsset#0"
      ]
    },
    "688": {
      "op": "itxn_begin"
    },
    "689": {
      "op": "intc_0 // 0",
      "stack_out": [
        "sellingAsset#0",
        "0"
      ]
    },
    "690": {
      "op": "itxn_field FreezeAssetFrozen",
      "stack_out": [
        "sellingAsset#0"
      ]
    },
    "692": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "sellingAsset#0"
      ],
      "stack_out": [
        "sellingAsset#0",
        "account#0 (copy)"
      ]
    },
    "694": {
      "op": "itxn_field FreezeAssetAccount",
      "stack_out": [
        "sellingAsset#0"
      ]
    },
    "696": {
      "op": "itxn_field FreezeAsset",
      "stack_out": []
    },
    "698": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "700": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "702": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "703": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "705": {
      "op": "itxn_submit"
    },
    "706": {
      "retsub": true,
      "op": "retsub"
    },
    "707": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.addWhitelist",
      "params": {
        "accounts#0": "bytes"
      },
      "block": "addWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "710": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "713": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)"
      ]
    },
    "715": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)",
        "0"
      ]
    },
    "716": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "717": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "718": {
      "block": "addWhitelist_for_header@1",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "720": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "722": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "723": {
      "op": "bz addWhitelist_after_for@4",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "726": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "accounts#0 (copy)"
      ]
    },
    "728": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "731": {
      "op": "frame_dig 1",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "733": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "734": {
      "op": "cover 2",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "736": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "737": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "738": {
      "op": "intc_2 // 32",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "739": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0"
      ]
    },
    "740": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0",
        "5"
      ]
    },
    "742": {
      "op": "itob",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0",
        "new_box_value%0#0"
      ]
    },
    "743": {
      "op": "box_put",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "744": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "745": {
      "op": "+",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "746": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "748": {
      "op": "b addWhitelist_for_header@1"
    },
    "751": {
      "block": "addWhitelist_after_for@4",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "752": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.removeWhitelist",
      "params": {
        "accounts#0": "bytes"
      },
      "block": "removeWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "755": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "758": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)"
      ]
    },
    "760": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)",
        "0"
      ]
    },
    "761": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "762": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "763": {
      "block": "removeWhitelist_for_header@1",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "765": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "767": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "768": {
      "op": "bz removeWhitelist_after_for@4",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "771": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "accounts#0 (copy)"
      ]
    },
    "773": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "776": {
      "op": "frame_dig 1",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "778": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "779": {
      "op": "cover 2",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "781": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "782": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "783": {
      "op": "intc_2 // 32",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "784": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0"
      ]
    },
    "785": {
      "op": "box_del",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "{box_del}"
      ]
    },
    "786": {
      "op": "pop",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "787": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "788": {
      "op": "+",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "789": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "791": {
      "op": "b removeWhitelist_for_header@1"
    },
    "794": {
      "block": "removeWhitelist_after_for@4",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "795": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.optin",
      "params": {
        "asset#0": "uint64"
      },
      "block": "optin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "798": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "801": {
      "op": "itxn_begin"
    },
    "802": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "804": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "806": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "808": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "810": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "811": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "813": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "814": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "816": {
      "op": "itxn_submit"
    },
    "817": {
      "retsub": true,
      "op": "retsub"
    },
    "818": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.getConfig",
      "params": {},
      "block": "getConfig",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "819": {
      "op": "bytec_2 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"revenueAddress\""
      ]
    },
    "820": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "821": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "822": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "823": {
      "op": "bytec_3 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"sellingAsset\""
      ]
    },
    "824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "value#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "value#0",
        "maybe_exists%1#0"
      ]
    },
    "825": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "value#0"
      ]
    },
    "826": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "827": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "828": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "829": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "value#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "value#0",
        "maybe_exists%2#0"
      ]
    },
    "830": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "value#0"
      ]
    },
    "831": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1"
      ]
    },
    "832": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "0"
      ]
    },
    "833": {
      "op": "bytec 4 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "0",
        "\"purchaseAsset\""
      ]
    },
    "835": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "value#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "value#0",
        "maybe_exists%3#0"
      ]
    },
    "836": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "value#0"
      ]
    },
    "837": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2"
      ]
    },
    "838": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "0"
      ]
    },
    "839": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "0",
        "\"assetPrice\""
      ]
    },
    "840": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "value#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "value#0",
        "maybe_exists%4#0"
      ]
    },
    "841": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "value#0"
      ]
    },
    "842": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3"
      ]
    },
    "843": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "0"
      ]
    },
    "844": {
      "op": "bytec 5 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\"",
        "0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "0",
        "\"unfreezeTime\""
      ]
    },
    "846": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "value#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "value#0",
        "maybe_exists%5#0"
      ]
    },
    "847": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "value#0"
      ]
    },
    "848": {
      "op": "itob",
      "defined_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4"
      ]
    },
    "849": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "maybe_value%0#0"
      ]
    },
    "851": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "maybe_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "853": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4"
      ],
      "stack_out": [
        "val_as_bytes%0#1",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "854": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#1"
      ]
    },
    "856": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4"
      ],
      "stack_out": [
        "val_as_bytes%0#2",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "857": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#2"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#3",
        "val_as_bytes%0#4"
      ],
      "stack_out": [
        "val_as_bytes%0#3",
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "860": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#3"
      ]
    },
    "862": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#4"
      ],
      "stack_out": [
        "val_as_bytes%0#4",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "863": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#4"
      ]
    },
    "864": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%6#0"
      ]
    },
    "865": {
      "retsub": true,
      "op": "retsub"
    },
    "866": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.setConfig",
      "params": {
        "config#0": "bytes"
      },
      "block": "setConfig",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "869": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "872": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "874": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "bytec_2 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"revenueAddress\""
      ]
    },
    "878": {
      "op": "swap",
      "stack_out": [
        "\"revenueAddress\"",
        "tmp%0#0"
      ]
    },
    "879": {
      "op": "app_global_put",
      "stack_out": []
    },
    "880": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "882": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "32"
      ]
    },
    "883": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "884": {
      "op": "bytec_3 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"sellingAsset\""
      ]
    },
    "885": {
      "op": "swap",
      "stack_out": [
        "\"sellingAsset\"",
        "new_state_value%0#0"
      ]
    },
    "886": {
      "op": "app_global_put",
      "stack_out": []
    },
    "887": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "889": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "40"
      ]
    },
    "891": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "892": {
      "op": "bytec_0 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"algoPrice\""
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "\"algoPrice\"",
        "new_state_value%1#0"
      ]
    },
    "894": {
      "op": "app_global_put",
      "stack_out": []
    },
    "895": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "897": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "48"
      ]
    },
    "899": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "900": {
      "op": "bytec 4 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"purchaseAsset\""
      ]
    },
    "902": {
      "op": "swap",
      "stack_out": [
        "\"purchaseAsset\"",
        "new_state_value%2#0"
      ]
    },
    "903": {
      "op": "app_global_put",
      "stack_out": []
    },
    "904": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "906": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "56"
      ]
    },
    "908": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "909": {
      "op": "bytec_1 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"assetPrice\""
      ]
    },
    "910": {
      "op": "swap",
      "stack_out": [
        "\"assetPrice\"",
        "new_state_value%3#0"
      ]
    },
    "911": {
      "op": "app_global_put",
      "stack_out": []
    },
    "912": {
      "op": "frame_dig -1",
      "stack_out": [
        "config#0 (copy)"
      ]
    },
    "914": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "config#0 (copy)"
      ],
      "stack_out": [
        "config#0 (copy)",
        "64"
      ]
    },
    "916": {
      "op": "extract_uint64",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "917": {
      "op": "bytec 5 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"unfreezeTime\""
      ]
    },
    "919": {
      "op": "swap",
      "stack_out": [
        "\"unfreezeTime\"",
        "new_state_value%4#0"
      ]
    },
    "920": {
      "op": "app_global_put",
      "stack_out": []
    },
    "921": {
      "retsub": true,
      "op": "retsub"
    },
    "922": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "params": {},
      "block": "ensureAdmin",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "924": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "925": {
      "op": "bytec 6 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "927": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "928": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "929": {
      "op": "==",
      "defined_out": [
        "cond#0"
      ],
      "stack_out": [
        "cond#0"
      ]
    },
    "930": {
      "op": "bnz ensureAdmin_after_if_else@3",
      "stack_out": []
    },
    "933": {
      "op": "pushbytes \"ERR:UNAUTH\"",
      "defined_out": [
        "\"ERR:UNAUTH\""
      ],
      "stack_out": [
        "\"ERR:UNAUTH\""
      ]
    },
    "945": {
      "op": "log",
      "stack_out": []
    },
    "946": {
      "op": "err"
    },
    "947": {
      "block": "ensureAdmin_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}