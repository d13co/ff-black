{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/folks-finance/ff-black/projects/ff-black/smart_contracts/ff_black/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCE;;AAAiD;;AAAjD;AAEA;AAA0D;;AAA1D;AAEA;AAAwD;AAAxD;AAEA;AAAgD;AAAhD;AAEA;;AAAyD;AAAzD;AAEA;AAAiD;AAAjD;AAGA;;AAAmD;AAAnD;AAfF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAuNE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAtMF;;;AAAA;AAAA;;AAsME;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA5LF;;;AAAA;AAAA;;AA4LE;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAzKF;;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAyKE;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AApJF;;;AAAA;AAAA;;AAoJE;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAxIF;;;AAwIE;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA5HF;;;AA4HE;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAvGF;;;AAAA;AAAA;;AAuGE;;;AAAA;;AAhFA;;AAAA;AAAA;AAAA;;AAAA;AAvBF;;AAAA;AAAA;AAuBE;;;AAAA;;AAvBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAuBE;;;;;;;AACoB;;AAlBpB;AAAA;AAAA;AAAA;AAgEa;;AAoKT;;;AApKyB;;;;;;;;;;AAqK3B;AACA;AArKY;;AAAA;;AAAA;AAAA;;AACW;AAAA;AAArB;;;AAEa;;AAAA;;AAtEjB;AAAA;AAAA;AAAA;AAsEa;AAgKT;;;AAhKqD;;AAiKvD;AACA;AAhKe;;AAAA;;AAAA;AAAA;;AApEjB;AAAA;AAAA;AAAA;AAoEa;AA8JT;;;AA9J6C;;AA+J/C;AACA;AApOF;AAAA;AAAA;AAAA;AAsEa;;AAAA;AAAA;AA4JT;;;AA5JkD;;AA6JpD;AACA;AApOF;AAAA;AAAA;AAAA;AAwEa;;AAAA;AAAA;;;AAlDW;;AAAA;AAAA;;AA4MpB;;;AA5M4B;;;;;;;;;;;AA6M9B;AACA;AA7M6B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACtB;;AAAA;AA0ML;;;AA1MmB;;;;;;;;;;;AA2MrB;AACA;AA3MM;;AAAA;;AAAoB;AAApB;AAAA;;AACN;;;AACiB;;AAAA;;AAMjB;;;;;;;;;;;;;AAAA;;;AArDgB;;;AAqDhB;AAUW;;AApCb;AAAA;;AAAA;AAAA;AAoCM;AAAA;;;AAAqD;;AAAA;;AAAA;;AAAA;AAAD;;;AACtD;AAIY;;;;;;;;;;;AAJZ;;;;AAhEc;;;AAgEd;;AAfA;;AAAA;AAAA;;AAAA;AAAA;;;;AA4CqB;;AAAA;AAAA;AAArB;;;AAEa;;AAAA;;AA/EjB;AAAA;AAAA;AAAA;AA+Ea;AAuJT;;;AAvJ0D;;AAwJ5D;AACA;AAvJe;;AAAA;;AA3EjB;AAAA;;AAAA;AAAA;AA2Ea;AAqJT;;;AArJqD;;;;;;;;;;;AAsJvD;AACA;AArJe;;AAAA;;AAAA;AAAA;;AA3EjB;AAAA;AAAA;AAAA;AA2Ea;AAmJT;;;AAnJmD;;AAoJrD;AACA;AAhOF;AAAA;AAAA;AAAA;AA6Ea;;AAAA;AAAA;AAiJT;;;AAjJwD;;AAkJ1D;AACA;AAhOF;AAAA;AAAA;AAAA;AA+Ea;;AAAA;AAAA;;;AAhEC;;;AAkEJ;;;;;;;;;;;;;AAAJ;AACA;AASN;;;AAGa;;AA3Fb;AAAA;;AAAA;AAAA;AA2FM;AAAJ;;;AACE;;;AAEF;AAvGF;AAAA;AAAA;AAAA;AA2Gc;;;;;;;;;AAJZ;;;;AAzHgB;;;AAyHhB;;AAeF;;;AACE;;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACkC;;AAAhC;AAAA;;;;;;;;;AAQJ;;;AACE;;;AAEA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC0B;;;;;;;;;;AAQ5B;;;AACE;;;AAEA;;AAAA;;;;AAIF;;;AACE;AAG0B;;;;;;;;AAH1B;;;AAxKgB;;;AAwKhB;;AAaF;;;AACE;;;AAtKF;AAwKE;;AAAA;AAtKF;AAuKE;;AAAA;AArKF;AAsKE;;AAAA;AApKF;;AAqKE;;AAAA;AAnKF;AAoKE;;AAAA;AAjKF;;AAkKE;;AAAA;AAEY;;AA7Kd;AAAA;AAAA;AAAA;AA6KO;;AAAA;;AAAD;;;AA7KN;AAAA;AAAA;AAAA;AA8KI;;;;AAQJ;;;AACE;;;AA3LF;;AA6LE;;AAAA;;AAOF;;;AACE;;;AAEA;AAGsB;;;;;;;;AAHtB;;;AArNgB;;;AAqNhB;;AAeA;;;AAEA;AAE0B;;;;AAF1B;;;AAtOgB;;;AAsOhB;;AAUW;;AAlOb;AAAA;;AAAA;AAAA;AAkOS;AAML;;;AANsC;;;;;;;;;;;;AAOxC;AACA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 4"
    },
    "7": {
      "op": "bytecblock \"sellingAsset\" \"algoPrice\" \"assetPrice\" \"revenueAddress\" \"unfreezeTime\" \"admin\" \"purchaseAsset\" \"ERR:PAYRCV\" \"ERR:UNDERPAY\" \"ERR:OVERPAY\""
    },
    "127": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "129": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "132": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "134": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ]
    },
    "136": {
      "op": "app_global_put",
      "stack_out": []
    },
    "137": {
      "op": "bytec_3 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\""
      ],
      "stack_out": [
        "\"revenueAddress\""
      ]
    },
    "138": {
      "op": "txn Sender",
      "defined_out": [
        "\"revenueAddress\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"revenueAddress\"",
        "new_state_value%1#0"
      ]
    },
    "140": {
      "op": "app_global_put",
      "stack_out": []
    },
    "141": {
      "op": "bytec_0 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\""
      ],
      "stack_out": [
        "\"sellingAsset\""
      ]
    },
    "142": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"sellingAsset\"",
        "0"
      ],
      "stack_out": [
        "\"sellingAsset\"",
        "0"
      ]
    },
    "143": {
      "op": "app_global_put",
      "stack_out": []
    },
    "144": {
      "op": "bytec_1 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\""
      ],
      "stack_out": [
        "\"algoPrice\""
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"algoPrice\"",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "bytec 6 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\""
      ],
      "stack_out": [
        "\"purchaseAsset\""
      ]
    },
    "149": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"purchaseAsset\"",
        "0"
      ]
    },
    "150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "151": {
      "op": "bytec_2 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\""
      ],
      "stack_out": [
        "\"assetPrice\""
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"assetPrice\"",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec 4 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\""
      ],
      "stack_out": [
        "\"unfreezeTime\""
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"unfreezeTime\"",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "160": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "163": {
      "op": "pushbytess 0xc4661a8e 0x79728b42 0xa0ef0f77 0x59e88229 0x7f19f9d4 0xc8c8bb1f 0x3f2c5d16 0x7d136df0 0xbd2af9da // method \"buy(txn)void\", method \"unfreeze(account)void\", method \"addWhitelist(address[])void\", method \"removeWhitelist(address[])void\", method \"optin(asset)void\", method \"setConfig((address,uint64,uint64,uint64,uint64,uint64))void\", method \"changeAdmin(account)void\", method \"assetCloseout(asset)void\", method \"algoCloseout()void\"",
      "defined_out": [
        "Method(addWhitelist(address[])void)",
        "Method(algoCloseout()void)",
        "Method(assetCloseout(asset)void)",
        "Method(buy(txn)void)",
        "Method(changeAdmin(account)void)",
        "Method(optin(asset)void)",
        "Method(removeWhitelist(address[])void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(unfreeze(account)void)"
      ],
      "stack_out": [
        "Method(buy(txn)void)",
        "Method(unfreeze(account)void)",
        "Method(addWhitelist(address[])void)",
        "Method(removeWhitelist(address[])void)",
        "Method(optin(asset)void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(changeAdmin(account)void)",
        "Method(assetCloseout(asset)void)",
        "Method(algoCloseout()void)"
      ]
    },
    "210": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addWhitelist(address[])void)",
        "Method(algoCloseout()void)",
        "Method(assetCloseout(asset)void)",
        "Method(buy(txn)void)",
        "Method(changeAdmin(account)void)",
        "Method(optin(asset)void)",
        "Method(removeWhitelist(address[])void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(unfreeze(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(buy(txn)void)",
        "Method(unfreeze(account)void)",
        "Method(addWhitelist(address[])void)",
        "Method(removeWhitelist(address[])void)",
        "Method(optin(asset)void)",
        "Method(setConfig((address,uint64,uint64,uint64,uint64,uint64))void)",
        "Method(changeAdmin(account)void)",
        "Method(assetCloseout(asset)void)",
        "Method(algoCloseout()void)",
        "tmp%2#0"
      ]
    },
    "213": {
      "op": "match main_buy_route@5 main_unfreeze_route@6 main_addWhitelist_route@7 main_removeWhitelist_route@8 main_optin_route@9 main_setConfig_route@10 main_changeAdmin_route@11 main_assetCloseout_route@12 main_algoCloseout_route@13",
      "stack_out": []
    },
    "233": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "234": {
      "op": "return",
      "stack_out": []
    },
    "235": {
      "block": "main_algoCloseout_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "237": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "238": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "239": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "241": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "242": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.algoCloseout",
      "op": "callsub algoCloseout"
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_assetCloseout_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "257": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "258": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "260": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.assetCloseout",
      "op": "callsub assetCloseout",
      "stack_out": []
    },
    "263": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "264": {
      "op": "return",
      "stack_out": []
    },
    "265": {
      "block": "main_changeAdmin_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "267": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "268": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "269": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "271": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "272": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "275": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "276": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "278": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.changeAdmin",
      "op": "callsub changeAdmin",
      "stack_out": []
    },
    "281": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "282": {
      "op": "return",
      "stack_out": []
    },
    "283": {
      "block": "main_setConfig_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "285": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "286": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "287": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "289": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "290": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0"
      ]
    },
    "293": {
      "op": "dup",
      "defined_out": [
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ]
    },
    "294": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "item0%0#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0"
      ]
    },
    "297": {
      "op": "dig 1",
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ]
    },
    "299": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "item0%0#0",
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "reinterpret_bytes[72]%0#0 (copy)",
        "32"
      ]
    },
    "300": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0"
      ]
    },
    "301": {
      "op": "dig 2",
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ]
    },
    "303": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "reinterpret_bytes[72]%0#0 (copy)",
        "40"
      ]
    },
    "305": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0"
      ]
    },
    "306": {
      "op": "dig 3",
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ]
    },
    "308": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "reinterpret_bytes[72]%0#0 (copy)",
        "48"
      ]
    },
    "310": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0"
      ]
    },
    "311": {
      "op": "dig 4",
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ]
    },
    "313": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "reinterpret_bytes[72]%0#0",
        "reinterpret_bytes[72]%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "reinterpret_bytes[72]%0#0 (copy)",
        "56"
      ]
    },
    "315": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[72]%0#0",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0"
      ]
    },
    "316": {
      "op": "uncover 5",
      "stack_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "reinterpret_bytes[72]%0#0"
      ]
    },
    "318": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "reinterpret_bytes[72]%0#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "reinterpret_bytes[72]%0#0",
        "64"
      ]
    },
    "320": {
      "op": "extract_uint64",
      "defined_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0"
      ],
      "stack_out": [
        "item0%0#0",
        "item1%1#0",
        "item2%1#0",
        "item3%1#0",
        "item4%1#0",
        "item5%1#0"
      ]
    },
    "321": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.setConfig",
      "op": "callsub setConfig",
      "stack_out": []
    },
    "324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_optin_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "336": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "337": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "339": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.optin",
      "op": "callsub optin",
      "stack_out": []
    },
    "342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "block": "main_removeWhitelist_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "346": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "347": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "348": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "350": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "351": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32][]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32][]%1#0"
      ]
    },
    "354": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.removeWhitelist",
      "op": "callsub removeWhitelist",
      "stack_out": []
    },
    "357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "block": "main_addWhitelist_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "361": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "362": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "363": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "365": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "366": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32][]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32][]%0#0"
      ]
    },
    "369": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.addWhitelist",
      "op": "callsub addWhitelist",
      "stack_out": []
    },
    "372": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "373": {
      "op": "return",
      "stack_out": []
    },
    "374": {
      "block": "main_unfreeze_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "376": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "377": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "378": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "380": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "381": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "384": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "385": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "387": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.unfreeze",
      "op": "callsub unfreeze",
      "stack_out": []
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "return",
      "stack_out": []
    },
    "392": {
      "block": "main_buy_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "394": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "395": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "396": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "398": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "399": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "401": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "402": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "403": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.buy",
      "op": "callsub buy",
      "stack_out": []
    },
    "406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "407": {
      "op": "return",
      "stack_out": []
    },
    "408": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "410": {
      "op": "bnz main_after_if_else@20",
      "stack_out": []
    },
    "413": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "415": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "416": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "417": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "418": {
      "op": "return",
      "stack_out": []
    },
    "419": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.buy",
      "params": {
        "txn#0": "uint64"
      },
      "block": "buy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "422": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "424": {
      "op": "dupn 5",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1"
      ]
    },
    "426": {
      "op": "txn Sender"
    },
    "428": {
      "op": "intc_0 // 0"
    },
    "429": {
      "op": "bytec_0 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "0",
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "0",
        "\"sellingAsset\""
      ]
    },
    "430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%0#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%0#0"
      ]
    },
    "431": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "432": {
      "op": "txn GroupIndex",
      "defined_out": [
        "buyer#0",
        "sellingAsset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%0#1"
      ]
    },
    "434": {
      "op": "bnz buy_after_if_else@56",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "437": {
      "op": "pushbytes \"ERR:GTXN\"",
      "defined_out": [
        "\"ERR:GTXN\"",
        "buyer#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:GTXN\""
      ]
    },
    "447": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "448": {
      "op": "err"
    },
    "449": {
      "block": "buy_after_if_else@56",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "451": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "453": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0"
      ]
    },
    "454": {
      "op": "frame_bury 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "456": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "1"
      ]
    },
    "457": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%2#1"
      ]
    },
    "458": {
      "op": "bz buy_after_if_else@12",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "461": {
      "op": "frame_dig -1",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "463": {
      "op": "gtxns Receiver",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1"
      ]
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "0"
      ]
    },
    "466": {
      "op": "bytec_3 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "0",
        "awst_tmp%0#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "0",
        "\"revenueAddress\""
      ]
    },
    "467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "468": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%3#1",
        "maybe_value%0#1"
      ]
    },
    "469": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "470": {
      "op": "bnz buy_after_if_else@44",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "473": {
      "op": "bytec 7 // \"ERR:PAYRCV\"",
      "defined_out": [
        "\"ERR:PAYRCV\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYRCV\""
      ]
    },
    "475": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "476": {
      "op": "err"
    },
    "477": {
      "block": "buy_after_if_else@44",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "479": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1"
      ]
    },
    "481": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "tmp%5#1"
      ]
    },
    "482": {
      "op": "frame_bury 5",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1"
      ]
    },
    "484": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "0"
      ]
    },
    "485": {
      "op": "bytec_1 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "0",
        "\"algoPrice\""
      ]
    },
    "486": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#1",
        "maybe_value%1#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "maybe_value%1#0",
        "maybe_exists%1#1"
      ]
    },
    "487": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "maybe_value%1#0"
      ]
    },
    "488": {
      "op": ">=",
      "defined_out": [
        "cond#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "489": {
      "op": "bnz buy_after_if_else@48",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "492": {
      "op": "bytec 8 // \"ERR:UNDERPAY\"",
      "defined_out": [
        "\"ERR:UNDERPAY\"",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:UNDERPAY\""
      ]
    },
    "494": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "495": {
      "op": "err"
    },
    "496": {
      "block": "buy_after_if_else@48",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "497": {
      "op": "bytec_1 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "498": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1",
        "maybe_exists%2#0"
      ]
    },
    "499": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1"
      ]
    },
    "500": {
      "op": "frame_dig 5",
      "defined_out": [
        "maybe_value%2#1",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#1",
        "tmp%5#1"
      ]
    },
    "502": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "maybe_value%2#1"
      ]
    },
    "503": {
      "op": "%",
      "defined_out": [
        "tmp%5#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%8#0"
      ]
    },
    "504": {
      "op": "bz buy_after_if_else@52",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "507": {
      "op": "bytec 9 // \"ERR:OVERPAY\"",
      "defined_out": [
        "\"ERR:OVERPAY\"",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:OVERPAY\""
      ]
    },
    "509": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "510": {
      "op": "err"
    },
    "511": {
      "block": "buy_after_if_else@52",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "512": {
      "op": "bytec_1 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"algoPrice\""
      ]
    },
    "513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "514": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0"
      ]
    },
    "515": {
      "op": "frame_dig 5",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%3#0",
        "tmp%5#1"
      ]
    },
    "517": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%5#1",
        "maybe_value%3#0"
      ]
    },
    "518": {
      "op": "/",
      "defined_out": [
        "qty#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "qty#0"
      ]
    },
    "519": {
      "op": "frame_bury 1",
      "defined_out": [
        "qty#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "521": {
      "block": "buy_after_inlined_smart_contracts/ff_black/contract.algo.ts::FfBlack.validatePayment@17",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "523": {
      "op": "box_len",
      "defined_out": [
        "buyer#0",
        "cond#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%1#0",
        "cond#0"
      ]
    },
    "524": {
      "op": "bury 1",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "526": {
      "op": "bnz buy_after_if_else@20",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "529": {
      "op": "pushbytes \"ERR:NO_WL\"",
      "defined_out": [
        "\"ERR:NO_WL\"",
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:NO_WL\""
      ]
    },
    "540": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "541": {
      "op": "err"
    },
    "542": {
      "block": "buy_after_if_else@20",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "544": {
      "op": "box_get",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "545": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "546": {
      "op": "btoi",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "quota#0"
      ]
    },
    "547": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "quota#0",
        "quota#0"
      ]
    },
    "548": {
      "op": "frame_bury 2",
      "defined_out": [
        "buyer#0",
        "maybe_exists%2#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_exists%2#0",
        "quota#0"
      ]
    },
    "550": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "quota#0",
        "maybe_exists%2#0"
      ]
    },
    "551": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "quota#0"
      ]
    },
    "552": {
      "op": "frame_dig 1",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "quota#0",
        "qty#0"
      ]
    },
    "554": {
      "op": ">=",
      "defined_out": [
        "buyer#0",
        "cond#0",
        "qty#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "555": {
      "op": "bnz buy_after_if_else@24",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "558": {
      "op": "pushbytes \"ERR:QUOTA\"",
      "defined_out": [
        "\"ERR:QUOTA\"",
        "buyer#0",
        "qty#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:QUOTA\""
      ]
    },
    "569": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "570": {
      "op": "err"
    },
    "571": {
      "block": "buy_after_if_else@24",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "quota#0"
      ]
    },
    "573": {
      "op": "frame_dig 1",
      "defined_out": [
        "qty#0",
        "quota#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "quota#0",
        "qty#0"
      ]
    },
    "575": {
      "op": "-",
      "defined_out": [
        "qty#0",
        "quota#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0"
      ]
    },
    "576": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0",
        "remaining#0"
      ]
    },
    "577": {
      "op": "frame_bury 3",
      "defined_out": [
        "qty#0",
        "quota#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0"
      ]
    },
    "579": {
      "op": "bnz buy_else_body@2",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "582": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "quota#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "584": {
      "op": "box_del",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "{box_del}"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "{box_del}"
      ]
    },
    "585": {
      "op": "pop",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "586": {
      "block": "buy_after_if_else@3",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "itxn_begin"
    },
    "587": {
      "op": "frame_dig 1",
      "defined_out": [
        "qty#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "qty#0"
      ]
    },
    "589": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "591": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0",
        "qty#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "593": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "595": {
      "op": "frame_dig 7",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "sellingAsset#0"
      ]
    },
    "597": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "599": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "buyer#0",
        "qty#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "4"
      ]
    },
    "600": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "602": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "buyer#0",
        "qty#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "603": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "605": {
      "op": "itxn_submit"
    },
    "606": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "sellingAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%6#0"
      ]
    },
    "608": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%6#0",
        "0"
      ]
    },
    "609": {
      "op": "bytec 4 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\"",
        "0",
        "buyer#0",
        "qty#0",
        "sellingAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%6#0",
        "0",
        "\"unfreezeTime\""
      ]
    },
    "611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "buyer#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "qty#0",
        "sellingAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "612": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "613": {
      "op": "<",
      "defined_out": [
        "buyer#0",
        "qty#0",
        "sellingAsset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%7#0"
      ]
    },
    "614": {
      "op": "bz buy_after_if_else@8",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "617": {
      "op": "frame_dig 6",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "619": {
      "op": "frame_dig 7",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "621": {
      "op": "asset_holding_get AssetFrozen",
      "defined_out": [
        "buyer#0",
        "check%0#0",
        "qty#0",
        "sellingAsset#0",
        "value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "623": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "value%0#0"
      ]
    },
    "624": {
      "op": "bnz buy_after_if_else@8",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "627": {
      "op": "itxn_begin"
    },
    "628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "buyer#0",
        "qty#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "1"
      ]
    },
    "629": {
      "op": "itxn_field FreezeAssetFrozen",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "631": {
      "op": "frame_dig 6",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0"
      ]
    },
    "633": {
      "op": "itxn_field FreezeAssetAccount",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "635": {
      "op": "frame_dig 7",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "sellingAsset#0"
      ]
    },
    "637": {
      "op": "itxn_field FreezeAsset",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "639": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "buyer#0",
        "qty#0",
        "sellingAsset#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "5"
      ]
    },
    "641": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "643": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "644": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "646": {
      "op": "itxn_submit"
    },
    "647": {
      "block": "buy_after_if_else@8",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "648": {
      "block": "buy_else_body@2",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "remaining#0"
      ]
    },
    "650": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "new_box_value%1#0"
      ]
    },
    "651": {
      "op": "frame_dig 6",
      "defined_out": [
        "buyer#0",
        "new_box_value%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "new_box_value%1#0",
        "buyer#0"
      ]
    },
    "653": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "buyer#0",
        "new_box_value%1#0"
      ]
    },
    "654": {
      "op": "box_put",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "655": {
      "op": "b buy_after_if_else@3"
    },
    "658": {
      "block": "buy_after_if_else@12",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0"
      ]
    },
    "660": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "awst_tmp%0#0",
        "4"
      ]
    },
    "661": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%12#0"
      ]
    },
    "662": {
      "op": "bz buy_after_if_else@15",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "665": {
      "op": "frame_dig -1",
      "defined_out": [
        "awst_tmp%0#0",
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "667": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0"
      ]
    },
    "669": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "0"
      ]
    },
    "670": {
      "op": "bytec_3 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\"",
        "0",
        "awst_tmp%0#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "0",
        "\"revenueAddress\""
      ]
    },
    "671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "672": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%13#0",
        "maybe_value%4#0"
      ]
    },
    "673": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "674": {
      "op": "bnz buy_after_if_else@28",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "677": {
      "op": "bytec 7 // \"ERR:PAYRCV\"",
      "defined_out": [
        "\"ERR:PAYRCV\"",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYRCV\""
      ]
    },
    "679": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "680": {
      "op": "err"
    },
    "681": {
      "block": "buy_after_if_else@28",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "683": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0"
      ]
    },
    "685": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "0"
      ]
    },
    "686": {
      "op": "bytec 6 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "0",
        "\"purchaseAsset\""
      ]
    },
    "688": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "689": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%15#0",
        "maybe_value%5#0"
      ]
    },
    "690": {
      "op": "==",
      "defined_out": [
        "cond#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "691": {
      "op": "bnz buy_after_if_else@32",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "694": {
      "op": "pushbytes \"ERR:ASSET\"",
      "defined_out": [
        "\"ERR:ASSET\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:ASSET\""
      ]
    },
    "705": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "706": {
      "op": "err"
    },
    "707": {
      "block": "buy_after_if_else@32",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "txn#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "txn#0 (copy)"
      ]
    },
    "709": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0"
      ]
    },
    "711": {
      "op": "dup",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "tmp%17#0"
      ]
    },
    "712": {
      "op": "frame_bury 4",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0"
      ]
    },
    "714": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "0"
      ]
    },
    "715": {
      "op": "bytec_2 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "716": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "717": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%6#0"
      ]
    },
    "718": {
      "op": ">=",
      "defined_out": [
        "cond#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "cond#0"
      ]
    },
    "719": {
      "op": "bnz buy_after_if_else@36",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "722": {
      "op": "bytec 8 // \"ERR:UNDERPAY\"",
      "defined_out": [
        "\"ERR:UNDERPAY\"",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:UNDERPAY\""
      ]
    },
    "724": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "725": {
      "op": "err"
    },
    "726": {
      "block": "buy_after_if_else@36",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "727": {
      "op": "bytec_2 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "728": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "729": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0"
      ]
    },
    "730": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%7#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%7#0",
        "tmp%17#0"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%7#0"
      ]
    },
    "733": {
      "op": "%",
      "defined_out": [
        "tmp%17#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%20#0"
      ]
    },
    "734": {
      "op": "bz buy_after_if_else@40",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "737": {
      "op": "bytec 9 // \"ERR:OVERPAY\"",
      "defined_out": [
        "\"ERR:OVERPAY\"",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:OVERPAY\""
      ]
    },
    "739": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "740": {
      "op": "err"
    },
    "741": {
      "block": "buy_after_if_else@40",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0"
      ]
    },
    "742": {
      "op": "bytec_2 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "0",
        "\"assetPrice\""
      ]
    },
    "743": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "744": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0"
      ]
    },
    "745": {
      "op": "frame_dig 4",
      "defined_out": [
        "maybe_value%8#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "maybe_value%8#0",
        "tmp%17#0"
      ]
    },
    "747": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "tmp%17#0",
        "maybe_value%8#0"
      ]
    },
    "748": {
      "op": "/",
      "defined_out": [
        "qty#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "qty#0"
      ]
    },
    "749": {
      "op": "frame_bury 1",
      "defined_out": [
        "qty#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "751": {
      "op": "b buy_after_inlined_smart_contracts/ff_black/contract.algo.ts::FfBlack.validatePayment@17"
    },
    "754": {
      "block": "buy_after_if_else@15",
      "stack_in": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ],
      "op": "pushbytes \"ERR:PAYTYPE\"",
      "defined_out": [
        "\"ERR:PAYTYPE\""
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0",
        "\"ERR:PAYTYPE\""
      ]
    },
    "767": {
      "op": "log",
      "stack_out": [
        "awst_tmp%0#0",
        "qty#0",
        "quota#0",
        "remaining#0",
        "tmp%17#0",
        "tmp%5#1",
        "buyer#0",
        "sellingAsset#0"
      ]
    },
    "768": {
      "op": "err"
    },
    "769": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.unfreeze",
      "params": {
        "account#0": "bytes"
      },
      "block": "unfreeze",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "772": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "775": {
      "op": "bytec 4 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"unfreezeTime\""
      ]
    },
    "777": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "778": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "779": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "780": {
      "op": "bz unfreeze_after_if_else@2",
      "stack_out": []
    },
    "783": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "786": {
      "block": "unfreeze_after_if_else@2",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "787": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "788": {
      "op": "bytec_0 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"sellingAsset\""
      ]
    },
    "789": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "790": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "792": {
      "op": "itxn_field FreezeAssetFrozen",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "794": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "account#0 (copy)"
      ]
    },
    "796": {
      "op": "itxn_field FreezeAssetAccount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "798": {
      "op": "itxn_field FreezeAsset",
      "stack_out": []
    },
    "800": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "5"
      ]
    },
    "802": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "804": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "805": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "807": {
      "op": "itxn_submit"
    },
    "808": {
      "retsub": true,
      "op": "retsub"
    },
    "809": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.addWhitelist",
      "params": {
        "accounts#0": "bytes"
      },
      "block": "addWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "812": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "815": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)"
      ]
    },
    "817": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)",
        "0"
      ]
    },
    "818": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "819": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "820": {
      "block": "addWhitelist_for_header@1",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "822": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "824": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "825": {
      "op": "bz addWhitelist_after_for@4",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "828": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "accounts#0 (copy)"
      ]
    },
    "830": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "833": {
      "op": "frame_dig 1",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "835": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "836": {
      "op": "cover 2",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "838": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "839": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "840": {
      "op": "intc_2 // 32",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "841": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0"
      ]
    },
    "842": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0",
        "5"
      ]
    },
    "844": {
      "op": "itob",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0",
        "new_box_value%0#0"
      ]
    },
    "845": {
      "op": "box_put",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "846": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "847": {
      "op": "+",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "848": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "850": {
      "op": "b addWhitelist_for_header@1"
    },
    "853": {
      "block": "addWhitelist_after_for@4",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "854": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.removeWhitelist",
      "params": {
        "accounts#0": "bytes"
      },
      "block": "removeWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "857": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "860": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)"
      ]
    },
    "862": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "accounts#0 (copy)"
      ],
      "stack_out": [
        "accounts#0 (copy)",
        "0"
      ]
    },
    "863": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length%0#0"
      ],
      "stack_out": [
        "array_length%0#0"
      ]
    },
    "864": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "865": {
      "block": "removeWhitelist_for_header@1",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "867": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_length%0#0"
      ]
    },
    "869": {
      "op": "<",
      "defined_out": [
        "array_length%0#0",
        "continue_looping%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "870": {
      "op": "bz removeWhitelist_after_for@4",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "873": {
      "op": "frame_dig -1",
      "defined_out": [
        "accounts#0 (copy)",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "accounts#0 (copy)"
      ]
    },
    "875": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0"
      ]
    },
    "878": {
      "op": "frame_dig 1",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "880": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "881": {
      "op": "cover 2",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "883": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "884": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "885": {
      "op": "intc_2 // 32",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "886": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "account#0",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "account#0"
      ]
    },
    "887": {
      "op": "box_del",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "{box_del}"
      ]
    },
    "888": {
      "op": "pop",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "889": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "890": {
      "op": "+",
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "891": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ]
    },
    "893": {
      "op": "b removeWhitelist_for_header@1"
    },
    "896": {
      "block": "removeWhitelist_after_for@4",
      "stack_in": [
        "array_length%0#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "897": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.optin",
      "params": {
        "asset#0": "uint64"
      },
      "block": "optin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "900": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "903": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "905": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack._optin",
      "op": "callsub _optin",
      "stack_out": []
    },
    "908": {
      "retsub": true,
      "op": "retsub"
    },
    "909": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack._optin",
      "params": {
        "asset#0": "uint64"
      },
      "block": "_optin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "912": {
      "op": "itxn_begin"
    },
    "913": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "915": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "917": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "919": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "921": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "922": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "924": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "925": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "927": {
      "op": "itxn_submit"
    },
    "928": {
      "retsub": true,
      "op": "retsub"
    },
    "929": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.setConfig",
      "params": {
        "config.revenueAddress#0": "bytes",
        "config.sellingAsset#0": "uint64",
        "config.algoPrice#0": "uint64",
        "config.purchaseAsset#0": "uint64",
        "config.assetPrice#0": "uint64",
        "config.unfreezeTime#0": "uint64"
      },
      "block": "setConfig",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "932": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "935": {
      "op": "bytec_3 // \"revenueAddress\"",
      "defined_out": [
        "\"revenueAddress\""
      ],
      "stack_out": [
        "\"revenueAddress\""
      ]
    },
    "936": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"revenueAddress\"",
        "config.revenueAddress#0 (copy)"
      ],
      "stack_out": [
        "\"revenueAddress\"",
        "config.revenueAddress#0 (copy)"
      ]
    },
    "938": {
      "op": "app_global_put",
      "stack_out": []
    },
    "939": {
      "op": "bytec_0 // \"sellingAsset\"",
      "defined_out": [
        "\"sellingAsset\""
      ],
      "stack_out": [
        "\"sellingAsset\""
      ]
    },
    "940": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"sellingAsset\"",
        "config.sellingAsset#0 (copy)"
      ],
      "stack_out": [
        "\"sellingAsset\"",
        "config.sellingAsset#0 (copy)"
      ]
    },
    "942": {
      "op": "app_global_put",
      "stack_out": []
    },
    "943": {
      "op": "bytec_1 // \"algoPrice\"",
      "defined_out": [
        "\"algoPrice\""
      ],
      "stack_out": [
        "\"algoPrice\""
      ]
    },
    "944": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"algoPrice\"",
        "config.algoPrice#0 (copy)"
      ],
      "stack_out": [
        "\"algoPrice\"",
        "config.algoPrice#0 (copy)"
      ]
    },
    "946": {
      "op": "app_global_put",
      "stack_out": []
    },
    "947": {
      "op": "bytec 6 // \"purchaseAsset\"",
      "defined_out": [
        "\"purchaseAsset\""
      ],
      "stack_out": [
        "\"purchaseAsset\""
      ]
    },
    "949": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"purchaseAsset\"",
        "config.purchaseAsset#0 (copy)"
      ],
      "stack_out": [
        "\"purchaseAsset\"",
        "config.purchaseAsset#0 (copy)"
      ]
    },
    "951": {
      "op": "app_global_put",
      "stack_out": []
    },
    "952": {
      "op": "bytec_2 // \"assetPrice\"",
      "defined_out": [
        "\"assetPrice\""
      ],
      "stack_out": [
        "\"assetPrice\""
      ]
    },
    "953": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetPrice\"",
        "config.assetPrice#0 (copy)"
      ],
      "stack_out": [
        "\"assetPrice\"",
        "config.assetPrice#0 (copy)"
      ]
    },
    "955": {
      "op": "app_global_put",
      "stack_out": []
    },
    "956": {
      "op": "bytec 4 // \"unfreezeTime\"",
      "defined_out": [
        "\"unfreezeTime\""
      ],
      "stack_out": [
        "\"unfreezeTime\""
      ]
    },
    "958": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"unfreezeTime\"",
        "config.unfreezeTime#0 (copy)"
      ],
      "stack_out": [
        "\"unfreezeTime\"",
        "config.unfreezeTime#0 (copy)"
      ]
    },
    "960": {
      "op": "app_global_put",
      "stack_out": []
    },
    "961": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "963": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "964": {
      "op": "bytec_0 // \"sellingAsset\"",
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"sellingAsset\""
      ]
    },
    "965": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "966": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "967": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "969": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "971": {
      "op": "bnz setConfig_after_if_else@2",
      "stack_out": []
    },
    "974": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "975": {
      "op": "bytec_0 // \"sellingAsset\"",
      "stack_out": [
        "0",
        "\"sellingAsset\""
      ]
    },
    "976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "977": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "978": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack._optin",
      "op": "callsub _optin",
      "stack_out": []
    },
    "981": {
      "block": "setConfig_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "982": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.changeAdmin",
      "params": {
        "newAdmin#0": "bytes"
      },
      "block": "changeAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "985": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "988": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "990": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "newAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "newAdmin#0 (copy)"
      ]
    },
    "992": {
      "op": "app_global_put",
      "stack_out": []
    },
    "993": {
      "retsub": true,
      "op": "retsub"
    },
    "994": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.assetCloseout",
      "params": {
        "asset#0": "uint64"
      },
      "block": "assetCloseout",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "997": {
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "1000": {
      "op": "itxn_begin"
    },
    "1001": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetCloseTo_idx_0#0"
      ]
    },
    "1003": {
      "op": "itxn_field AssetCloseTo",
      "stack_out": []
    },
    "1005": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1007": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1009": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1010": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1012": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1013": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1015": {
      "op": "itxn_submit"
    },
    "1016": {
      "retsub": true,
      "op": "retsub"
    },
    "1017": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.algoCloseout",
      "params": {},
      "block": "algoCloseout",
      "stack_in": [],
      "callsub": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "op": "callsub ensureAdmin"
    },
    "1020": {
      "op": "itxn_begin"
    },
    "1021": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1023": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "1025": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1026": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1028": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1029": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1031": {
      "op": "itxn_submit"
    },
    "1032": {
      "retsub": true,
      "op": "retsub"
    },
    "1033": {
      "subroutine": "smart_contracts/ff_black/contract.algo.ts::FfBlack.ensureAdmin",
      "params": {},
      "block": "ensureAdmin",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1035": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1036": {
      "op": "bytec 5 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1038": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1039": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1040": {
      "op": "==",
      "defined_out": [
        "cond#0"
      ],
      "stack_out": [
        "cond#0"
      ]
    },
    "1041": {
      "op": "bnz ensureAdmin_after_if_else@3",
      "stack_out": []
    },
    "1044": {
      "op": "pushbytes \"ERR:UNAUTH\"",
      "defined_out": [
        "\"ERR:UNAUTH\""
      ],
      "stack_out": [
        "\"ERR:UNAUTH\""
      ]
    },
    "1056": {
      "op": "log",
      "stack_out": []
    },
    "1057": {
      "op": "err"
    },
    "1058": {
      "block": "ensureAdmin_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}