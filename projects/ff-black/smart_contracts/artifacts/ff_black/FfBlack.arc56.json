{
    "name": "FfBlack",
    "structs": {
        "ContractConfig": [
            {
                "name": "revenueAddress",
                "type": "address"
            },
            {
                "name": "sellingAsset",
                "type": "uint64"
            },
            {
                "name": "algoPrice",
                "type": "uint64"
            },
            {
                "name": "purchaseAsset",
                "type": "uint64"
            },
            {
                "name": "assetPrice",
                "type": "uint64"
            },
            {
                "name": "unfreezeTime",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "buy",
            "args": [
                {
                    "type": "txn",
                    "name": "txn",
                    "desc": "Payment or asset transfer transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Buy NFT. Account must be on whitelist. Freezes buyer after, if not frozen already",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "unfreeze",
            "args": [
                {
                    "type": "account",
                    "name": "account",
                    "desc": "account to unfreeze"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Unfreeze account. Before unfreezeTime, only admin can unfreeze\nAfter unfreezeTime, anyone can unfreeze anyone else",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addWhitelist",
            "args": [
                {
                    "type": "address[]",
                    "name": "accounts",
                    "desc": "accounts to add to WL"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add multiple accounts to whitelist.\nBuy quota is hardcoded to 5",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeWhitelist",
            "args": [
                {
                    "type": "address[]",
                    "name": "accounts",
                    "desc": "accounts to remove from WL"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove accounts from whitelist. Fails if any are not on WL",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optin",
            "args": [
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "asset to opt in to"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opt in to asset. Should not be needed",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setConfig",
            "args": [
                {
                    "type": "(address,uint64,uint64,uint64,uint64,uint64)",
                    "struct": "ContractConfig",
                    "name": "config",
                    "desc": "new config"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set configuration values & opt in to selling asset - WARNING: REPLACES ALL VALUES",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeAdmin",
            "args": [
                {
                    "type": "account",
                    "name": "newAdmin",
                    "desc": "new admin account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "change admin account. Admin only",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "assetCloseout",
            "args": [
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "asset to close out of"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Close out of an asset, sending everything to caller (admin)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "algoCloseout",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Close out of all algo, sending everything to caller (admin)\nRequires baseline MBR, i.e. no boxes remaining",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 5,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW4="
                },
                "revenueAddress": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "cmV2ZW51ZUFkZHJlc3M="
                },
                "sellingAsset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2VsbGluZ0Fzc2V0"
                },
                "algoPrice": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWxnb1ByaWNl"
                },
                "purchaseAsset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHVyY2hhc2VBc3NldA=="
                },
                "assetPrice": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRQcmljZQ=="
                },
                "unfreezeTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dW5mcmVlemVUaW1l"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "wl": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        523
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        800,
                        845,
                        896
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        238,
                        250,
                        268,
                        286,
                        301,
                        319,
                        334,
                        349,
                        367
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        582
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        388
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        241,
                        253,
                        271,
                        289,
                        304,
                        322,
                        337,
                        352,
                        370
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        403,
                        440,
                        459,
                        471,
                        486,
                        631,
                        648,
                        676,
                        688,
                        703,
                        737,
                        749,
                        946,
                        1008
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEgBCYKDHNlbGxpbmdBc3NldAlhbGdvUHJpY2UKYXNzZXRQcmljZQ5yZXZlbnVlQWRkcmVzcwVhZG1pbg1wdXJjaGFzZUFzc2V0DHVuZnJlZXplVGltZQpFUlI6UEFZUkNWDEVSUjpVTkRFUlBBWQtFUlI6T1ZFUlBBWTEYQAAaJwQxAGcrMQBnKCJnKSJnJwUiZyoiZycGImcxG0EA2YIJBMRmGo4EeXKLQgSg7w93BFnogikEfxn51ATIyLsfBD8sXRYEfRNt8AS9KvnaNhoAjgkAgwBxAGIAUwBBADIAIAAOAAIiQzEZFEQxGESIAuUjQzEZFEQxGEQ2GgEXwDCIArwjQzEZFEQxGEQ2GgEXwByIAp4jQzEZFEQxGEQ2GgGIAlAjQzEZFEQxGEQ2GgEXwDCIAh4jQzEZFEQxGEQ2GgGIAeQjQzEZFEQxGEQ2GgGIAagjQzEZFEQxGEQ2GgEXwByIAW4jQzEZFEQxGEQxFiMJiAANI0MxGUD/aDEYFEQjQ4oBAIAARwUxACIoZUQxFkAADIAIRVJSOkdUWE6wAIv/OBBJjAAjEkEAuIv/OAciK2VEEkAABCcHsACL/zgISYwFIillRA9AAAQnCLAAIillRIsFTBhBAAQnCbAAIillRIsFTAqMAYsGvUUBQAANgAlFUlI6Tk9fV0ywAIsGvkwXSYwCTESLAQ9AAA2ACUVSUjpRVU9UQbAAiwKLAQlJjANAADWLBrxIsYsBshKLBkmyFIsHSbIRJbIQIrIBs3ABREAAFLEjsi+LBrIuiweyLYEFshAisgGziYsDFosGTL9C/8WLACUSQQBZi/84FCIrZUQSQAAEJwewAIv/OBEiJwVlRBJAAA2ACUVSUjpBU1NFVLAAi/84EkmMBCIqZUQPQAAEJwiwACIqZUSLBEwYQQAEJwmwACIqZUSLBEwKjAFC/ySAC0VSUjpQQVlUWVBFsACKAQAyByInBmVEDEEAA4gBAbEiKGVEIrIvi/+yLrItgQWyECKyAbOJigEAiADki/8iWSKLAYsADEEAGYv/VwIAiwFJTgIkCyRYgQUWvyMIjAFC/9+JigEAiAC3i/8iWSKLAYsADEEAF4v/VwIAiwFJTgIkCyRYvEgjCIwBQv/hiYoBAIgAjIv/iAABiYoBALEyCrIUi/+yESWyECKyAbOJigEAiABsi/9XACArTGeL/yRbKExni/+BKFspTGeL/4EwWycFTGeL/4E4WypMZ4v/gUBbJwZMZyIoZUSI/66JigEAiAAtJwSL/2eJigEAiAAhsTEAshWL/7IRJbIQIrIBs4mIAA2xMQCyCSOyECKyAbOJMQAiJwRlRBJAAA6ACkVSUjpVTkFVVEiwAIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}