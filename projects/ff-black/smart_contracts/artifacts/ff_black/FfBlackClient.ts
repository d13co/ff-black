/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"FfBlack","structs":{"ContractConfig":[{"name":"revenueAddress","type":"address"},{"name":"sellingAsset","type":"uint64"},{"name":"algoPrice","type":"uint64"},{"name":"purchaseAsset","type":"uint64"},{"name":"assetPrice","type":"uint64"},{"name":"unfreezeTime","type":"uint64"}]},"methods":[{"name":"buy","args":[{"type":"txn","name":"txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"unfreeze","args":[{"type":"account","name":"account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addWhitelist","args":[{"type":"address[]","name":"accounts"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeWhitelist","args":[{"type":"address[]","name":"accounts"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optin","args":[{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getConfig","args":[],"returns":{"type":"(address,uint64,uint64,uint64,uint64,uint64)","struct":"ContractConfig"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"setConfig","args":[{"type":"(address,uint64,uint64,uint64,uint64,uint64)","struct":"ContractConfig","name":"config"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":5,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="},"revenueAddress":{"keyType":"AVMString","valueType":"address","key":"cmV2ZW51ZUFkZHJlc3M="},"sellingAsset":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2VsbGluZ0Fzc2V0"},"algoPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWxnb1ByaWNl"},"purchaseAsset":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHVyY2hhc2VBc3NldA=="},"assetPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRQcmljZQ=="},"unfreezeTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"dW5mcmVlemVUaW1l"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"wl":{"keyType":"address","valueType":"uint64","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[482],"errorMessage":"Box must have value"},{"pc":[739,784,874],"errorMessage":"Index access is out of bounds"},{"pc":[224,239,260,278,293,308,326],"errorMessage":"OnCompletion is not NoOp"},{"pc":[538],"errorMessage":"account opted into asset"},{"pc":[347],"errorMessage":"can only call when creating"},{"pc":[227,242,263,281,296,311,329],"errorMessage":"can only call when not creating"},{"pc":[362,399,418,430,445,577,594,622,634,649,683,687,821,825,830,836,841,847,928],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEgBCYKCWFsZ29QcmljZQphc3NldFByaWNlDnJldmVudWVBZGRyZXNzDHNlbGxpbmdBc3NldA1wdXJjaGFzZUFzc2V0DHVuZnJlZXplVGltZQVhZG1pbgpFUlI6UEFZUkNWDEVSUjpVTkRFUlBBWQtFUlI6T1ZFUlBBWTEYQAAaJwYxAGcqMQBnKyJnKCJnJwQiZykiZycFImcxG0EAsIIHBMRmGo4EeXKLQgSg7w93BFnogikEfxn51AQOZlubBMjIux82GgCOBwBoAFYARwA4ACYAEQACIkMxGRREMRhENhoBiAJ4I0MxGRREMRhEiAI8gAQVH3x1TFCwI0MxGRREMRhENhoBF8AwiAIKI0MxGRREMRhENhoBiAHQI0MxGRREMRhENhoBiAGUI0MxGRREMRhENhoBF8AciAFhI0MxGRREMRhEMRYjCYgADSNDMRlA/4MxGBREI0OKAQCAAEcEMQAiK2VEMRZAAAyACEVSUjpHVFhOsACL/zgQSYwAIxJBAKuL/zgHIiplRBJAAAQnB7AAi/84CEmMBCIoZUQPQAAEJwiwACIoZUSLBEwYQQAEJwmwACIoZUSLBEwKjAGLBb1FAUAADYAJRVJSOk5PX1dMsACLBb5MF0mMAkxEiwEPQAANgAlFUlI6UVVPVEGwAIsCiwFJTgIJFosFSU8Cv7FMshJJshSLBkmyESWyECKyAbNwAURAABSxI7IviwWyLosGsi2BBbIQIrIBs4mLACUSQQBZi/84FCIqZUQSQAAEJwewAIv/OBEiJwRlRBJAAA2ACUVSUjpBU1NFVLAAi/84EkmMAyIpZUQPQAAEJwiwACIpZUSLA0wYQQAEJwmwACIpZUSLA0wKjAFC/zGAC0VSUjpQQVlUWVBFsACKAQAiJwVlRQFEIitlRLEisi+L/7Iusi2BBbIQIrIBs4mKAQCIANGL/yJZIosBiwAMQQAZi/9XAgCLAUlOAiQLJFiBBRa/IwiMAUL/34mKAQCIAKSL/yJZIosBiwAMQQAXi/9XAgCLAUlOAiQLJFi8SCMIjAFC/+GJigEAiAB5sTIKshSL/7IRJbIQIrIBs4kiKmVEIitlRBYiKGVEFiInBGVEFiIpZUQWIicFZUQWTwVPBVBPBFBPA1BPAlBMUImKAQCIADKL/1cAICpMZ4v/JFsrTGeL/4EoWyhMZ4v/gTBbJwRMZ4v/gThbKUxni/+BQFsnBUxniTEAIicGZUQSQAAOgApFUlI6VU5BVVRIsACJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ContractConfig = {
  revenueAddress: string,
  sellingAsset: bigint,
  algoPrice: bigint,
  purchaseAsset: bigint,
  assetPrice: bigint,
  unfreezeTime: bigint
}


/**
 * Converts the ABI tuple representation of a ContractConfig to the struct representation
 */
export function ContractConfigFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ContractConfig, APP_SPEC.structs) as ContractConfig
}

/**
 * The argument types for the FfBlack contract
 */
export type FfBlackArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'buy(txn)void': {
      txn: AppMethodCallTransactionArgument
    }
    'unfreeze(account)void': {
      account: Uint8Array | string
    }
    'addWhitelist(address[])void': {
      accounts: string[]
    }
    'removeWhitelist(address[])void': {
      accounts: string[]
    }
    'optin(asset)void': {
      asset: bigint
    }
    'getConfig()(address,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'setConfig((address,uint64,uint64,uint64,uint64,uint64))void': {
      config: ContractConfig
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'buy(txn)void': [txn: AppMethodCallTransactionArgument]
    'unfreeze(account)void': [account: Uint8Array | string]
    'addWhitelist(address[])void': [accounts: string[]]
    'removeWhitelist(address[])void': [accounts: string[]]
    'optin(asset)void': [asset: bigint]
    'getConfig()(address,uint64,uint64,uint64,uint64,uint64)': []
    'setConfig((address,uint64,uint64,uint64,uint64,uint64))void': [config: ContractConfig]
  }
}

/**
 * The return type for each method
 */
export type FfBlackReturns = {
  'buy(txn)void': void
  'unfreeze(account)void': void
  'addWhitelist(address[])void': void
  'removeWhitelist(address[])void': void
  'optin(asset)void': void
  'getConfig()(address,uint64,uint64,uint64,uint64,uint64)': ContractConfig
  'setConfig((address,uint64,uint64,uint64,uint64,uint64))void': void
}

/**
 * Defines the types of available calls and state of the FfBlack smart contract.
 */
export type FfBlackTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'buy(txn)void' | 'buy', {
      argsObj: FfBlackArgs['obj']['buy(txn)void']
      argsTuple: FfBlackArgs['tuple']['buy(txn)void']
      returns: FfBlackReturns['buy(txn)void']
    }>
    & Record<'unfreeze(account)void' | 'unfreeze', {
      argsObj: FfBlackArgs['obj']['unfreeze(account)void']
      argsTuple: FfBlackArgs['tuple']['unfreeze(account)void']
      returns: FfBlackReturns['unfreeze(account)void']
    }>
    & Record<'addWhitelist(address[])void' | 'addWhitelist', {
      argsObj: FfBlackArgs['obj']['addWhitelist(address[])void']
      argsTuple: FfBlackArgs['tuple']['addWhitelist(address[])void']
      returns: FfBlackReturns['addWhitelist(address[])void']
    }>
    & Record<'removeWhitelist(address[])void' | 'removeWhitelist', {
      argsObj: FfBlackArgs['obj']['removeWhitelist(address[])void']
      argsTuple: FfBlackArgs['tuple']['removeWhitelist(address[])void']
      returns: FfBlackReturns['removeWhitelist(address[])void']
    }>
    & Record<'optin(asset)void' | 'optin', {
      argsObj: FfBlackArgs['obj']['optin(asset)void']
      argsTuple: FfBlackArgs['tuple']['optin(asset)void']
      returns: FfBlackReturns['optin(asset)void']
    }>
    & Record<'getConfig()(address,uint64,uint64,uint64,uint64,uint64)' | 'getConfig', {
      argsObj: FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']
      returns: FfBlackReturns['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'setConfig((address,uint64,uint64,uint64,uint64,uint64))void' | 'setConfig', {
      argsObj: FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']
      argsTuple: FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']
      returns: FfBlackReturns['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        revenueAddress: string
        sellingAsset: bigint
        algoPrice: bigint
        purchaseAsset: bigint
        assetPrice: bigint
        unfreezeTime: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        wl: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FfBlackSignatures = keyof FfBlackTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FfBlackNonVoidMethodSignatures = keyof FfBlackTypes['methods'] extends infer T ? T extends keyof FfBlackTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FfBlack smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FfBlackSignatures> = FfBlackTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FfBlack smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FfBlackSignatures> = FfBlackTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FfBlackTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FfBlackTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FfBlackCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FfBlackDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FfBlackCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FfBlack smart contract
 */
export abstract class FfBlackParamsFactory {
  /**
   * Constructs a no op call for the buy(txn)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(txn)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txn],
    }
  }
  /**
   * Constructs a no op call for the unfreeze(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static unfreeze(params: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'unfreeze(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the addWhitelist(address[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addWhitelist(params: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addWhitelist(address[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.accounts],
    }
  }
  /**
   * Constructs a no op call for the removeWhitelist(address[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeWhitelist(params: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeWhitelist(address[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.accounts],
    }
  }
  /**
   * Constructs a no op call for the optin(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optin(params: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optin(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the getConfig()(address,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getConfig(params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getConfig()(address,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the setConfig((address,uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setConfig(params: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setConfig((address,uint64,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.config],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FfBlack smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FfBlackFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FfBlackFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FfBlackClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FfBlackClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FfBlack smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FfBlackDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FfBlackClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FfBlack smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FfBlack smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FfBlack smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FfBlackClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FfBlack smart contract
 */
export class FfBlackClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FfBlackClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FfBlack app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FfBlackClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FfBlackNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FfBlackClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FfBlackClient> {
    return new FfBlackClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FfBlackClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FfBlackClient> {
    return new FfBlackClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FfBlack smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FfBlack smart contract using the `buy(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.buy(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `unfreeze(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    unfreeze: (params: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.unfreeze(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `addWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addWhitelist: (params: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.addWhitelist(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `removeWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeWhitelist: (params: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.removeWhitelist(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `optin(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optin: (params: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.optin(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `getConfig()(address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getConfig: (params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FfBlackParamsFactory.getConfig(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `setConfig((address,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setConfig: (params: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FfBlackParamsFactory.setConfig(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FfBlack smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FfBlack smart contract using the `buy(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.buy(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `unfreeze(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    unfreeze: (params: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.unfreeze(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `addWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addWhitelist: (params: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.addWhitelist(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `removeWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeWhitelist: (params: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.removeWhitelist(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `optin(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optin: (params: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.optin(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `getConfig()(address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getConfig: (params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.getConfig(params))
    },

    /**
     * Makes a call to the FfBlack smart contract using the `setConfig((address,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setConfig: (params: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FfBlackParamsFactory.setConfig(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FfBlack smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FfBlack smart contract using the `buy(txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['buy(txn)void'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `unfreeze(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    unfreeze: async (params: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.unfreeze(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['unfreeze(account)void'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `addWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addWhitelist: async (params: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.addWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['addWhitelist(address[])void'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `removeWhitelist(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeWhitelist: async (params: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.removeWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['removeWhitelist(address[])void'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `optin(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optin: async (params: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.optin(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['optin(asset)void'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `getConfig()(address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getConfig: async (params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.getConfig(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the FfBlack smart contract using the `setConfig((address,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setConfig: async (params: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FfBlackParamsFactory.setConfig(params))
      return {...result, return: result.return as unknown as (undefined | FfBlackReturns['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FfBlackClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FfBlack smart contract using the `getConfig()(address,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getConfig(params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> = {args: []}) {
    const result = await this.appClient.send.call(FfBlackParamsFactory.getConfig(params))
    return result.return as unknown as FfBlackReturns['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current FfBlack app
   */
  state = {
    /**
     * Methods to access global state for the current FfBlack app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          revenueAddress: result.revenueAddress,
          sellingAsset: result.sellingAsset,
          algoPrice: result.algoPrice,
          purchaseAsset: result.purchaseAsset,
          assetPrice: result.assetPrice,
          unfreezeTime: result.unfreezeTime,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the revenueAddress key in global state
       */
      revenueAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("revenueAddress")) as string | undefined },
      /**
       * Get the current value of the sellingAsset key in global state
       */
      sellingAsset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("sellingAsset")) as bigint | undefined },
      /**
       * Get the current value of the algoPrice key in global state
       */
      algoPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("algoPrice")) as bigint | undefined },
      /**
       * Get the current value of the purchaseAsset key in global state
       */
      purchaseAsset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("purchaseAsset")) as bigint | undefined },
      /**
       * Get the current value of the assetPrice key in global state
       */
      assetPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetPrice")) as bigint | undefined },
      /**
       * Get the current value of the unfreezeTime key in global state
       */
      unfreezeTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("unfreezeTime")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current FfBlack app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the wl map in box state
       */
      wl: {
        /**
         * Get all current values of the wl map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("wl")) as Map<string, bigint> },
        /**
         * Get a current value of the wl map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("wl", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): FfBlackComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a buy(txn)void method call against the FfBlack contract
       */
      buy(params: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a unfreeze(account)void method call against the FfBlack contract
       */
      unfreeze(params: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.unfreeze(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addWhitelist(address[])void method call against the FfBlack contract
       */
      addWhitelist(params: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeWhitelist(address[])void method call against the FfBlack contract
       */
      removeWhitelist(params: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optin(asset)void method call against the FfBlack contract
       */
      optin(params: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getConfig()(address,uint64,uint64,uint64,uint64,uint64) method call against the FfBlack contract
       */
      getConfig(params: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getConfig(params)))
        resultMappers.push((v) => client.decodeReturnValue('getConfig()(address,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a setConfig((address,uint64,uint64,uint64,uint64,uint64))void method call against the FfBlack contract
       */
      setConfig(params: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setConfig(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the FfBlack contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FfBlackComposer
  }
}
export type FfBlackComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the buy(txn)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<FfBlackArgs['obj']['buy(txn)void'] | FfBlackArgs['tuple']['buy(txn)void']>): FfBlackComposer<[...TReturns, FfBlackReturns['buy(txn)void'] | undefined]>

  /**
   * Calls the unfreeze(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unfreeze(params?: CallParams<FfBlackArgs['obj']['unfreeze(account)void'] | FfBlackArgs['tuple']['unfreeze(account)void']>): FfBlackComposer<[...TReturns, FfBlackReturns['unfreeze(account)void'] | undefined]>

  /**
   * Calls the addWhitelist(address[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addWhitelist(params?: CallParams<FfBlackArgs['obj']['addWhitelist(address[])void'] | FfBlackArgs['tuple']['addWhitelist(address[])void']>): FfBlackComposer<[...TReturns, FfBlackReturns['addWhitelist(address[])void'] | undefined]>

  /**
   * Calls the removeWhitelist(address[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeWhitelist(params?: CallParams<FfBlackArgs['obj']['removeWhitelist(address[])void'] | FfBlackArgs['tuple']['removeWhitelist(address[])void']>): FfBlackComposer<[...TReturns, FfBlackReturns['removeWhitelist(address[])void'] | undefined]>

  /**
   * Calls the optin(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optin(params?: CallParams<FfBlackArgs['obj']['optin(asset)void'] | FfBlackArgs['tuple']['optin(asset)void']>): FfBlackComposer<[...TReturns, FfBlackReturns['optin(asset)void'] | undefined]>

  /**
   * Calls the getConfig()(address,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getConfig(params?: CallParams<FfBlackArgs['obj']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | FfBlackArgs['tuple']['getConfig()(address,uint64,uint64,uint64,uint64,uint64)']>): FfBlackComposer<[...TReturns, FfBlackReturns['getConfig()(address,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the setConfig((address,uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setConfig(params?: CallParams<FfBlackArgs['obj']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | FfBlackArgs['tuple']['setConfig((address,uint64,uint64,uint64,uint64,uint64))void']>): FfBlackComposer<[...TReturns, FfBlackReturns['setConfig((address,uint64,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FfBlack smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FfBlackComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FfBlackComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FfBlackComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FfBlackComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FfBlackComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FfBlackComposerResults<TReturns>>
}
export type FfBlackComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

